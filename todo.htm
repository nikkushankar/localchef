<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <title>Template • TodoMVC</title>

        <script src="https://cdn.jsdelivr.net/npm/axios@0.21.1/dist/axios.min.js"></script>
        <script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.min.js"></script>
		<script src="https://www.funxion.io:9443/auth/js/keycloak.js"></script>
        <style>
            html,
body {
	margin: 0;
	padding: 0;
}

button {
	margin: 0;
	padding: 0;
	border: 0;
	background: none;
	font-size: 100%;
	vertical-align: baseline;
	font-family: inherit;
	font-weight: inherit;
	color: inherit;
	-webkit-appearance: none;
	appearance: none;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

body {
	font: 14px 'Helvetica Neue', Helvetica, Arial, sans-serif;
	line-height: 1.4em;
	background: #f5f5f5;
	color: #111111;
	min-width: 230px;
	max-width: 550px;
	margin: 0 auto;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	font-weight: 300;
}

.hidden {
	display: none;
}

.todoapp {
	background: #fff;
	margin: 130px 0 40px 0;
	position: relative;
	box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2),
	            0 25px 50px 0 rgba(0, 0, 0, 0.1);
}

.todoapp input::-webkit-input-placeholder {
	font-style: italic;
	font-weight: 400;
	color: rgba(0, 0, 0, 0.4);
}

.todoapp input::-moz-placeholder {
	font-style: italic;
	font-weight: 400;
	color: rgba(0, 0, 0, 0.4);
}

.todoapp input::input-placeholder {
	font-style: italic;
	font-weight: 400;
	color: rgba(0, 0, 0, 0.4);
}

.todoapp h1 {
	position: absolute;
	top: -140px;
	width: 100%;
	font-size: 80px;
	font-weight: 200;
	text-align: center;
	color: #b83f45;
	-webkit-text-rendering: optimizeLegibility;
	-moz-text-rendering: optimizeLegibility;
	text-rendering: optimizeLegibility;
}

.new-todo,
.edit {
	position: relative;
	margin: 0;
	width: 100%;
	font-size: 24px;
	font-family: inherit;
	font-weight: inherit;
	line-height: 1.4em;
	color: inherit;
	padding: 6px;
	border: 1px solid #999;
	box-shadow: inset 0 -1px 5px 0 rgba(0, 0, 0, 0.2);
	box-sizing: border-box;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

.new-todo {
	padding: 16px 16px 16px 60px;
	height: 65px;
	border: none;
	background: rgba(0, 0, 0, 0.003);
	box-shadow: inset 0 -2px 1px rgba(0,0,0,0.03);
}

.main {
	position: relative;
	z-index: 2;
	border-top: 1px solid #e6e6e6;
}

.toggle-all {
	width: 1px;
	height: 1px;
	border: none; /* Mobile Safari */
	opacity: 0;
	position: absolute;
	right: 100%;
	bottom: 100%;
}

.toggle-all + label {
	display: flex;
	align-items: center;
	justify-content: center;
	width: 45px;
	height: 65px;
	font-size: 0;
	position: absolute;
	top: -65px;
	left: -0;
}

.toggle-all + label:before {
	content: '❯';
	display: inline-block;
	font-size: 22px;
	color: #949494;
	padding: 10px 27px 10px 27px;
	-webkit-transform: rotate(90deg);
	transform: rotate(90deg);
}

.toggle-all:checked + label:before {
	color: #484848;
}

.todo-list {
	margin: 0;
	padding: 0;
	list-style: none;
}

.todo-list li {
	position: relative;
	font-size: 24px;
	border-bottom: 1px solid #ededed;
}

.todo-list li:last-child {
	border-bottom: none;
}

.todo-list li.editing {
	border-bottom: none;
	padding: 0;
}

.todo-list li.editing .edit {
	display: block;
	width: calc(100% - 43px);
	padding: 12px 16px;
	margin: 0 0 0 43px;
}

.todo-list li.editing .view {
	display: none;
}

.todo-list li .toggle {
	text-align: center;
	width: 40px;
	/* auto, since non-WebKit browsers doesn't support input styling */
	height: auto;
	position: absolute;
	top: 0;
	bottom: 0;
	margin: auto 0;
	border: none; /* Mobile Safari */
	-webkit-appearance: none;
	appearance: none;
}

.todo-list li .toggle {
	opacity: 0;
}

.todo-list li .toggle + label {
	/*
		Firefox requires `#` to be escaped - https://bugzilla.mozilla.org/show_bug.cgi?id=922433
		IE and Edge requires *everything* to be escaped to render, so we do that instead of just the `#` - https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/7157459/
	*/
	background-image: url('data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%2240%22%20height%3D%2240%22%20viewBox%3D%22-10%20-18%20100%20135%22%3E%3Ccircle%20cx%3D%2250%22%20cy%3D%2250%22%20r%3D%2250%22%20fill%3D%22none%22%20stroke%3D%22%23949494%22%20stroke-width%3D%223%22/%3E%3C/svg%3E');
	background-repeat: no-repeat;
	background-position: center left;
}

.todo-list li .toggle:checked + label {
	background-image: url('data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2240%22%20height%3D%2240%22%20viewBox%3D%22-10%20-18%20100%20135%22%3E%3Ccircle%20cx%3D%2250%22%20cy%3D%2250%22%20r%3D%2250%22%20fill%3D%22none%22%20stroke%3D%22%2359A193%22%20stroke-width%3D%223%22%2F%3E%3Cpath%20fill%3D%22%233EA390%22%20d%3D%22M72%2025L42%2071%2027%2056l-4%204%2020%2020%2034-52z%22%2F%3E%3C%2Fsvg%3E');
}

.todo-list li label {
	word-break: break-all;
	padding: 15px 15px 15px 60px;
	display: block;
	line-height: 1.2;
	transition: color 0.4s;
	font-weight: 400;
	color: #484848;
}

.todo-list li.completed label {
	color: #949494;
	text-decoration: line-through;
}

.todo-list li .destroy {
	display: none;
	position: absolute;
	top: 0;
	right: 10px;
	bottom: 0;
	width: 40px;
	height: 40px;
	margin: auto 0;
	font-size: 30px;
	color: #949494;
	transition: color 0.2s ease-out;
}

.todo-list li .destroy:hover,
.todo-list li .destroy:focus {
	color: #C18585;
}

.todo-list li .destroy:after {
	content: '×';
	display: block;
	height: 100%;
	line-height: 1.1;
}

.todo-list li:hover .destroy {
	display: block;
}

.todo-list li .edit {
	display: none;
}

.todo-list li.editing:last-child {
	margin-bottom: -1px;
}

.footer {
	padding: 10px 15px;
	height: 20px;
	text-align: center;
	font-size: 15px;
	border-top: 1px solid #e6e6e6;
}

.footer:before {
	content: '';
	position: absolute;
	right: 0;
	bottom: 0;
	left: 0;
	height: 50px;
	overflow: hidden;
	box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2),
	            0 8px 0 -3px #f6f6f6,
	            0 9px 1px -3px rgba(0, 0, 0, 0.2),
	            0 16px 0 -6px #f6f6f6,
	            0 17px 2px -6px rgba(0, 0, 0, 0.2);
}

.todo-count {
	float: left;
	text-align: left;
}

.todo-count strong {
	font-weight: 300;
}

.filters {
	margin: 0;
	padding: 0;
	list-style: none;
	position: absolute;
	right: 0;
	left: 0;
}

.filters li {
	display: inline;
}

.filters li a {
	color: inherit;
	margin: 3px;
	padding: 3px 7px;
	text-decoration: none;
	border: 1px solid transparent;
	border-radius: 3px;
}

.filters li a:hover {
	border-color: #DB7676;
}

.filters li a.selected {
	border-color: #CE4646;
}

.clear-completed,
html .clear-completed:active {
	float: right;
	position: relative;
	line-height: 19px;
	text-decoration: none;
	cursor: pointer;
}

.clear-completed:hover {
	text-decoration: underline;
}

.info {
	margin: 65px auto 0;
	color: #4d4d4d;
	font-size: 11px;
	text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);
	text-align: center;
}

.info p {
	line-height: 1;
}

.info a {
	color: inherit;
	text-decoration: none;
	font-weight: 400;
}

.info a:hover {
	text-decoration: underline;
}

/*
	Hack to remove background from Mobile Safari.
	Can't use it globally since it destroys checkboxes in Firefox
*/
@media screen and (-webkit-min-device-pixel-ratio:0) {
	.toggle-all,
	.todo-list li .toggle {
		background: none;
	}

	.todo-list li .toggle {
		height: 40px;
	}
}

@media (max-width: 430px) {
	.footer {
		height: 50px;
	}

	.filters {
		bottom: 10px;
	}
}

:focus,
.toggle:focus + label,
.toggle-all:focus + label {
	box-shadow: 0 0 2px 2px #CF7D7D;
	outline: 0;
}

        </style>
    </head>

    <body>
        <section x-data="todos()" class="todoapp">
            <header class="header">
                <h1>todos</h1>

                <input
                    x-model="newTodo"
                    @keyup.enter="addTodo"
                    class="new-todo"
                    placeholder="What needs to be done?"
                    autofocus
                />
            </header>

            <section class="main" x-show="todos.length">
                <input
                    x-model="allComplete"
                    @click="toggleAllComplete"
                    id="toggle-all"
                    class="toggle-all"
                    type="checkbox"
                />

                <label for="toggle-all">Mark all as complete</label>

                <ul class="todo-list">
                    <template x-for="todo in filteredTodos" :key="todo.id">
                        <li
                            :class="{
                                editing: todo === editedTodo,
                                completed: todo.completed
                            }"
                        >
                            <div class="view">
                                <input
                                    x-model="todo.completed"
                                    @click="toggleTodoCompletion(todo)"
                                    class="toggle"
                                    type="checkbox"
                                />

                                <label
                                    x-text="todo.body"
                                    @dblclick="editTodo(todo)"
                                ></label>

                                <button
                                    @click="deleteTodo(todo)"
                                    class="destroy"
                                ></button>
                            </div>

                            <input
                                x-model="todo.body"
                                @keyup.enter="editComplete(todo)"
                                @keyup.escape="cancelEdit(todo)"
                                class="edit"
                            />
                        </li>
                    </template>
                </ul>
            </section>

            <footer class="footer" x-show="todos.length">
                <span class="todo-count">
                    <strong x-text="active.length"></strong>
                    <span
                        x-text="active.length === 1 ? 'item' : 'items'"
                    ></span>
                    left
                </span>

                <ul class="filters">
                    <li>
                        <a
                            @click.prevent="filter = 'all'"
                            :class="{ selected: filter === 'all' }"
                            href="#/"
                        >
                            All
                        </a>
                    </li>

                    <li>
                        <a
                            @click.prevent="filter = 'active'"
                            :class="{ selected: filter === 'active' }"
                            href="#/active"
                        >
                            Active
                        </a>
                    </li>

                    <li>
                        <a
                            @click.prevent="filter = 'completed'"
                            :class="{ selected: filter === 'completed' }"
                            href="#/completed"
                        >
                            Completed
                        </a>
                    </li>
                </ul>

                <button
                    x-show="completed.length"
                    @click="clearCompletedTodos"
                    class="clear-completed"
                >
                    Clear completed
                </button>
            </footer>
        </section>

        <footer class="info">
            <p>Double-click to edit a todo</p>

            <p>
                Created by
                <a href="https://laracasts.com">Jeffrey Way</a>
            </p>

            <p>
                Part of
                <a href="http://todomvc.com">TodoMVC</a>
            </p>
        </footer>

        <!-- Scripts here. Don't remove ↓ -->
        
        <script>window.todoStore = {
            todos: JSON.parse(localStorage.getItem('todo-store') || '[]'),
        
            save() {
                localStorage.setItem('todo-store', JSON.stringify(this.todos));
            },
        };
        
        window.todos = function () {
            return {
                ...todoStore,
                filter: 'all',
                newTodo: '',
                editedTodo: null,
        
                get active() {
                    return this.todos.filter((todo) => !todo.completed);
                },
        
                get completed() {
                    return this.todos.filter((todo) => todo.completed);
                },
        
                get filteredTodos() {
                    return {
                        all: this.todos,
                        active: this.active,
                        completed: this.completed
                    }[this.filter];
                },
        
                get allComplete() {
                    return this.todos.length === this.completed.length;
                },
        
                addTodo() {
                    if (!this.newTodo) return;
        
                    this.todos.push({
                        id: Date.now(),
                        body: this.newTodo,
                        completed: false,
                    });
        
                    this.save();
        
                    this.newTodo = '';
                },
        
                editTodo(todo) {
                    todo.cachedBody = todo.body;
        
                    this.editedTodo = todo;
                },
        
                cancelEdit(todo) {
                    todo.body = todo.cachedBody;
        
                    this.editedTodo = null;
        
                    delete todo.cachedBody;
                },
        
                editComplete(todo) {
                    if (todo.body.trim() === '') {
                        return this.deleteTodo(todo);
                    }
        
                    this.editedTodo = null;
        
                    this.save();
                },
        
                deleteTodo(todo) {
                    let position = this.todos.indexOf(todo);
        
                    this.todos.splice(position, 1);
        
                    this.save();
                },
        
                toggleTodoCompletion(todo) {
                    todo.completed = !todo.completed;
        
                    this.save();
                },
        
                toggleAllComplete() {
                    let allComplete = this.allComplete;
        
                    this.todos.forEach((todo) => (todo.completed = !allComplete));
        
                    this.save();
                },
        
                clearCompletedTodos() {
                    this.todos = this.active;
        
                    this.save();
                },
            };
        };
        </script>
		          <script type="text/javascript">

					let initOptions = {
					  url: 'https://www.funxion.io:9443/auth' , realm: 'quarkus', clientId: 'frontend', onLoad: 'login-required'
					}
					
					let keycloak = Keycloak(initOptions);
					window.keycloak = keycloak;
					keycloak.init({ onLoad: initOptions.onLoad }).then((auth) => {
					  if (!auth) {
						window.location.reload();
					  }
					
					  let payload = {
						idToken: keycloak.idToken,
						accessToken: keycloak.token
					  }
					
					  if ((keycloak.token && keycloak.idToken) != '' && (keycloak.idToken != '')) {
						console.log("--> log: User has logged in: " + keycloak.subject);
						console.log("--> log: TokenParsed: "+ JSON.stringify(keycloak.tokenParsed));
						console.log("--> log: User name: " + keycloak.tokenParsed.preferred_username);
						console.log("--> log: accessToken: " + payload.accessToken);
						console.log("--> log: idToken: " + payload.idToken);
						payload = {
						  name: keycloak.tokenParsed.preferred_username
						};
					  }
					  else {
						payloadRefreshedTokens = {
						  idToken: "",
						  accessToken: ""
						}
					  }
					}).catch(() => {
					  console.log("-->log: Failed to authenticate");
					});
					
					setInterval(() => {
									window.keycloak.updateToken(70)
										.then(refreshed => {
											if (refreshed) {
												console.info('Token refreshed' + refreshed);
											} else {
												console.warn('Token not refreshed, valid for '
													+ Math.round(window.keycloak.tokenParsed.exp + window.keycloak.timeSkew - new Date().getTime() / 1000) + ' seconds');
											}
										})
										.catch(error => console.error(error));
								}, 6000)
					
					
							</script>
					
    </body>
</html>
